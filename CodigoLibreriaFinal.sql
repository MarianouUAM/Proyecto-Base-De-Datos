/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.5 		*/
/*  Created On : 18-sept-2025 16:03:35 				*/
/*  DBMS       : SQL Server 2012 						*/
/* ---------------------------------------------------- */

/* Drop Foreign Key Constraints */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalle_venta_Tb_libros]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalle_venta] DROP CONSTRAINT [FK_Tb_detalle_venta_Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalle_venta_Tb_ventas]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalle_venta] DROP CONSTRAINT [FK_Tb_detalle_venta_Tb_ventas]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalles_pedidos_Tb_libros]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalles_pedidos] DROP CONSTRAINT [FK_Tb_detalles_pedidos_Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalles_pedidos_Tb_pedidos]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalles_pedidos] DROP CONSTRAINT [FK_Tb_detalles_pedidos_Tb_pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_inventario_Tb_libros]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_inventario] DROP CONSTRAINT [FK_Tb_inventario_Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_libros_Tb_autores]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_libros] DROP CONSTRAINT [FK_Tb_libros_Tb_autores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_libros_Tb_editoriales]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_libros] DROP CONSTRAINT [FK_Tb_libros_Tb_editoriales]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_pedidos_Tb_proveedores]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_pedidos] DROP CONSTRAINT [FK_Tb_pedidos_Tb_proveedores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_ventas_Tb_clientes]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_ventas] DROP CONSTRAINT [FK_Tb_ventas_Tb_clientes]
GO

/* Drop Tables */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_autores]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_autores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_clientes]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_clientes]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_detalle_venta]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_detalle_venta]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_detalles_pedidos]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_detalles_pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_editoriales]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_editoriales]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_inventario]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_inventario]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_libros]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_pedidos]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_proveedores]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_proveedores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_ventas]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_ventas]
GO

/* Create Tables */

CREATE TABLE [Tb_autores]
(
	[Id_autor] int NOT NULL,
	[Nombre] varchar(50) NOT NULL,    -- Contiene el nombre de pila del autor, usado en la referencia de sus obras.
	[Apellido] varchar(50) NOT NULL,    -- Almacena el apellido del autor para su correcta identificación.
	[Nacionalidad] varchar(50) NOT NULL    -- Indica el país de origen del autor, útil para clasificaciones culturales o geográficas.
)
GO

CREATE TABLE [Tb_clientes]
(
	[Id_cliente] int NOT NULL,
	[Nombre] varchar(50) NOT NULL,    -- Registra el nombre propio del cliente, necesario para su identificación en reportes y facturación.
	[Apellido] varchar(50) NOT NULL,    -- Almacena el apellido del cliente, complementando su identificación personal.
	[Email] varchar(50) NULL,    -- Guarda la dirección de correo electrónico, útil para contacto, notificaciones y seguimiento.
	[Fecha_registro] date NOT NULL    -- Fecha en que el cliente se registró en la base de datos, permite llevar un control histórico.
)
GO

CREATE TABLE [Tb_detalle_venta]
(
	[Id_detalle] int NOT NULL,
	[Id_venta] int NOT NULL,    -- Clave foránea que vincula el detalle con la venta correspondiente.
	[Id_libro] int NOT NULL,    -- Clave foránea que indica el libro vendido en la transacción.
	[Cantidad] int NOT NULL,    -- Número de ejemplares de ese libro vendidos.
	[Precio_unitario] decimal(18,2) NOT NULL    -- Precio de venta por unidad de libro en ese detalle.
)
GO

CREATE TABLE [Tb_detalles_pedidos]
(
	[Id_detalle_pedido] int NOT NULL,
	[Id_pedido] int NOT NULL,    -- Clave foránea que vincula el detalle con el pedido correspondiente.
	[Id_libro] int NOT NULL,    -- Clave foránea que indica el libro solicitado al proveedor.
	[Cantidad] int NOT NULL,    -- Número de copias pedidas de ese libro.
	[Costo_unitario] decimal(18,2) NOT NULL    -- Precio acordado por unidad del libro en el pedido.
)
GO

CREATE TABLE [Tb_editoriales]
(
	[Id_editorial] int NOT NULL,
	[Nombre_editorial] varchar(100) NOT NULL,    -- Nombre completo de la editorial.
	[Pais] varchar(50) NULL,    -- País de origen de la editorial.
	[Telefono] varchar(15) NULL    -- Número telefónico de contacto de la editorial.
)
GO

CREATE TABLE [Tb_inventario]
(
	[Id_inventario] int NOT NULL,
	[Id_libro] int NOT NULL,    -- Clave foránea que indica a qué libro pertenece el stock.
	[Cantidad_disponible] int NOT NULL,    -- Número de ejemplares disponibles en existencia.
	[Ubicacion] varchar(50) NULL,    -- Lugar físico donde se encuentra almacenado el libro.
	[Ultima_actualizacion] datetime NOT NULL    -- Fecha y hora de la última modificación del stock.
)
GO

CREATE TABLE [Tb_libros]
(
	[Id_libro] int NOT NULL,
	[Titulo] varchar(100) NOT NULL,    -- Nombre o título del libro.
	[ISBN] varchar(13) NOT NULL,    -- Código único internacional que identifica el libro.
	[Ano_publicacion] date NOT NULL,    -- Fecha o año en que el libro fue publicado.
	[Precio_venta] decimal(10,2) NOT NULL,    -- Precio de venta del libro en la librería.
	[Id_autor] int NOT NULL,    -- Clave foránea que relaciona el libro con su autor.
	[Id_editorial] int NOT NULL    -- Clave foránea que relaciona el libro con su editorial.
)
GO

CREATE TABLE [Tb_pedidos]
(
	[Id_pedido] int NOT NULL,
	[Fecha_pedido] date NOT NULL,    -- Fecha en la que se realizó la orden de compra.
	[Estado] varchar(50) NOT NULL,    -- Estado actual del pedido (Enviado, Recibido o Cancelado).
	[Total_pedido] decimal(18,2) NOT NULL,    -- Valor total del pedido solicitado al proveedor.
	[Id_proveedores] int NOT NULL    -- Clave foránea que indica a qué proveedor se realizó el pedido.
)
GO

CREATE TABLE [Tb_proveedores]
(
	[Id_proveedores] int NOT NULL,
	[Nombre_proveedor] varchar(50) NOT NULL,    -- Nombre de la empresa o persona proveedora.
	[Contacto_proveedor] varchar(50) NULL,    -- Persona de contacto dentro de la empresa proveedora.
	[Telefono] varchar(15) NULL    -- Teléfono de contacto del proveedor.
)
GO

CREATE TABLE [Tb_ventas]
(
	[Id_venta] int NOT NULL,
	[Id_cliente] int NOT NULL,    -- Clave foránea que indica qué cliente realizó la compra.
	[Fecha_venta] date NOT NULL,    -- Fecha y hora exacta en la que se concretó la venta.
	[Total_venta] decimal(18,2) NOT NULL    -- Valor total de la venta incluyendo impuestos.
)
GO

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE [Tb_autores] 
 ADD CONSTRAINT [PK_Tb_autores]
	PRIMARY KEY CLUSTERED ([Id_autor] ASC)
GO

ALTER TABLE [Tb_clientes] 
 ADD CONSTRAINT [PK_Tb_clientes]
	PRIMARY KEY CLUSTERED ([Id_cliente] ASC)
GO

ALTER TABLE [Tb_detalle_venta] 
 ADD CONSTRAINT [PK_Tb_detalle_venta]
	PRIMARY KEY CLUSTERED ([Id_detalle] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalle_venta_Tb_libros] 
 ON [Tb_detalle_venta] ([Id_libro] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalle_venta_Tb_ventas] 
 ON [Tb_detalle_venta] ([Id_venta] ASC)
GO

ALTER TABLE [Tb_detalles_pedidos] 
 ADD CONSTRAINT [PK_Tb_detalles_pedidos]
	PRIMARY KEY CLUSTERED ([Id_detalle_pedido] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalles_pedidos_Tb_libros] 
 ON [Tb_detalles_pedidos] ([Id_libro] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalles_pedidos_Tb_pedidos] 
 ON [Tb_detalles_pedidos] ([Id_pedido] ASC)
GO

ALTER TABLE [Tb_editoriales] 
 ADD CONSTRAINT [PK_Tb_editoriales]
	PRIMARY KEY CLUSTERED ([Id_editorial] ASC)
GO

ALTER TABLE [Tb_inventario] 
 ADD CONSTRAINT [PK_Tb_inventario]
	PRIMARY KEY CLUSTERED ([Id_inventario] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_inventario_Tb_libros] 
 ON [Tb_inventario] ([Id_libro] ASC)
GO

ALTER TABLE [Tb_libros] 
 ADD CONSTRAINT [PK_Tb_libros]
	PRIMARY KEY CLUSTERED ([Id_libro] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_libros_Tb_autores] 
 ON [Tb_libros] ([Id_autor] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_libros_Tb_editoriales] 
 ON [Tb_libros] ([Id_editorial] ASC)
GO

ALTER TABLE [Tb_pedidos] 
 ADD CONSTRAINT [PK_Tb_pedidos]
	PRIMARY KEY CLUSTERED ([Id_pedido] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_pedidos_Tb_proveedores] 
 ON [Tb_pedidos] ([Id_proveedores] ASC)
GO

ALTER TABLE [Tb_proveedores] 
 ADD CONSTRAINT [PK_Tb_proveedores]
	PRIMARY KEY CLUSTERED ([Id_proveedores] ASC)
GO

ALTER TABLE [Tb_ventas] 
 ADD CONSTRAINT [PK_Tb_ventas]
	PRIMARY KEY CLUSTERED ([Id_venta] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_ventas_Tb_clientes] 
 ON [Tb_ventas] ([Id_cliente] ASC)
GO

/* Create Foreign Key Constraints */

ALTER TABLE [Tb_detalle_venta] ADD CONSTRAINT [FK_Tb_detalle_venta_Tb_libros]
	FOREIGN KEY ([Id_libro]) REFERENCES [Tb_libros] ([Id_libro]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_detalle_venta] ADD CONSTRAINT [FK_Tb_detalle_venta_Tb_ventas]
	FOREIGN KEY ([Id_venta]) REFERENCES [Tb_ventas] ([Id_venta]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_detalles_pedidos] ADD CONSTRAINT [FK_Tb_detalles_pedidos_Tb_libros]
	FOREIGN KEY ([Id_libro]) REFERENCES [Tb_libros] ([Id_libro]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_detalles_pedidos] ADD CONSTRAINT [FK_Tb_detalles_pedidos_Tb_pedidos]
	FOREIGN KEY ([Id_pedido]) REFERENCES [Tb_pedidos] ([Id_pedido]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_inventario] ADD CONSTRAINT [FK_Tb_inventario_Tb_libros]
	FOREIGN KEY ([Id_libro]) REFERENCES [Tb_libros] ([Id_libro]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_libros] ADD CONSTRAINT [FK_Tb_libros_Tb_autores]
	FOREIGN KEY ([Id_autor]) REFERENCES  () ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_libros] ADD CONSTRAINT [FK_Tb_libros_Tb_autores]
    FOREIGN KEY ([Id_autor])
    REFERENCES [Tb_autores]([Id_autor])
    ON DELETE NO ACTION ON UPDATE NO ACTION;
GO

ALTER TABLE [Tb_libros] ADD CONSTRAINT [FK_Tb_libros_Tb_editoriales]
    FOREIGN KEY ([Id_editorial])
    REFERENCES [Tb_editoriales]([Id_editorial])
    ON DELETE NO ACTION ON UPDATE NO ACTION;
GO

ALTER TABLE [Tb_ventas] ADD CONSTRAINT [FK_Tb_ventas_Tb_clientes]
	FOREIGN KEY ([Id_cliente]) REFERENCES [Tb_clientes] ([Id_cliente]) ON DELETE No Action ON UPDATE No Action
GO


