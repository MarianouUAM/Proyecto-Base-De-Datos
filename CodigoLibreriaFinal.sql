/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.5 		*/
/*  Created On : 18-sept-2025 16:03:35 				*/
/*  DBMS       : SQL Server 2012 						*/
/* ---------------------------------------------------- */

/* Drop Foreign Key Constraints */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalle_venta_Tb_libros]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalle_venta] DROP CONSTRAINT [FK_Tb_detalle_venta_Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalle_venta_Tb_ventas]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalle_venta] DROP CONSTRAINT [FK_Tb_detalle_venta_Tb_ventas]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalles_pedidos_Tb_libros]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalles_pedidos] DROP CONSTRAINT [FK_Tb_detalles_pedidos_Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_detalles_pedidos_Tb_pedidos]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_detalles_pedidos] DROP CONSTRAINT [FK_Tb_detalles_pedidos_Tb_pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_inventario_Tb_libros]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_inventario] DROP CONSTRAINT [FK_Tb_inventario_Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_libros_Tb_autores]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_libros] DROP CONSTRAINT [FK_Tb_libros_Tb_autores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_libros_Tb_editoriales]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_libros] DROP CONSTRAINT [FK_Tb_libros_Tb_editoriales]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_pedidos_Tb_proveedores]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_pedidos] DROP CONSTRAINT [FK_Tb_pedidos_Tb_proveedores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[FK_Tb_ventas_Tb_clientes]') AND OBJECTPROPERTY(id, N'IsForeignKey') = 1) 
ALTER TABLE [Tb_ventas] DROP CONSTRAINT [FK_Tb_ventas_Tb_clientes]
GO

/* Drop Tables */

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_autores]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_autores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_clientes]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_clientes]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_detalle_venta]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_detalle_venta]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_detalles_pedidos]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_detalles_pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_editoriales]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_editoriales]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_inventario]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_inventario]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_libros]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_libros]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_pedidos]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_pedidos]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_proveedores]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_proveedores]
GO

IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id(N'[Tb_ventas]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1) 
DROP TABLE [Tb_ventas]
GO

/* Create Tables */

CREATE TABLE [Tb_autores]
(
	[Id_autor] int NOT NULL,
	[Nombre] varchar(50) NOT NULL,    -- Contiene el nombre de pila del autor, usado en la referencia de sus obras.
	[Apellido] varchar(50) NOT NULL,    -- Almacena el apellido del autor para su correcta identificación.
	[Nacionalidad] varchar(50) NOT NULL    -- Indica el país de origen del autor, útil para clasificaciones culturales o geográficas.
)
GO

CREATE TABLE [Tb_clientes]
(
	[Id_cliente] int NOT NULL,
	[Nombre] varchar(50) NOT NULL,    -- Registra el nombre propio del cliente, necesario para su identificación en reportes y facturación.
	[Apellido] varchar(50) NOT NULL,    -- Almacena el apellido del cliente, complementando su identificación personal.
	[Email] varchar(50) NULL,    -- Guarda la dirección de correo electrónico, útil para contacto, notificaciones y seguimiento.
	[Fecha_registro] date NOT NULL    -- Fecha en que el cliente se registró en la base de datos, permite llevar un control histórico.
)
GO

CREATE TABLE [Tb_detalle_venta]
(
	[Id_detalle] int NOT NULL,
	[Id_venta] int NOT NULL,    -- Clave foránea que vincula el detalle con la venta correspondiente.
	[Id_libro] int NOT NULL,    -- Clave foránea que indica el libro vendido en la transacción.
	[Cantidad] int NOT NULL,    -- Número de ejemplares de ese libro vendidos.
	[Precio_unitario] decimal(18,2) NOT NULL    -- Precio de venta por unidad de libro en ese detalle.
)
GO

CREATE TABLE [Tb_detalles_pedidos]
(
	[Id_detalle_pedido] int NOT NULL,
	[Id_pedido] int NOT NULL,    -- Clave foránea que vincula el detalle con el pedido correspondiente.
	[Id_libro] int NOT NULL,    -- Clave foránea que indica el libro solicitado al proveedor.
	[Cantidad] int NOT NULL,    -- Número de copias pedidas de ese libro.
	[Costo_unitario] decimal(18,2) NOT NULL    -- Precio acordado por unidad del libro en el pedido.
)
GO

CREATE TABLE [Tb_editoriales]
(
	[Id_editorial] int NOT NULL,
	[Nombre_editorial] varchar(100) NOT NULL,    -- Nombre completo de la editorial.
	[Pais] varchar(50) NULL,    -- País de origen de la editorial.
	[Telefono] varchar(15) NULL    -- Número telefónico de contacto de la editorial.
)
GO

CREATE TABLE [Tb_inventario]
(
	[Id_inventario] int NOT NULL,
	[Id_libro] int NOT NULL,    -- Clave foránea que indica a qué libro pertenece el stock.
	[Cantidad_disponible] int NOT NULL,    -- Número de ejemplares disponibles en existencia.
	[Ubicacion] varchar(50) NULL,    -- Lugar físico donde se encuentra almacenado el libro.
	[Ultima_actualizacion] datetime NOT NULL    -- Fecha y hora de la última modificación del stock.
)
GO

CREATE TABLE [Tb_libros]
(
	[Id_libro] int NOT NULL,
	[Titulo] varchar(100) NOT NULL,    -- Nombre o título del libro.
	[ISBN] varchar(13) NOT NULL,    -- Código único internacional que identifica el libro.
	[Ano_publicacion] date NOT NULL,    -- Fecha o año en que el libro fue publicado.
	[Precio_venta] decimal(10,2) NOT NULL,    -- Precio de venta del libro en la librería.
	[Id_autor] int NOT NULL,    -- Clave foránea que relaciona el libro con su autor.
	[Id_editorial] int NOT NULL    -- Clave foránea que relaciona el libro con su editorial.
)
GO

CREATE TABLE [Tb_pedidos]
(
	[Id_pedido] int NOT NULL,
	[Fecha_pedido] date NOT NULL,    -- Fecha en la que se realizó la orden de compra.
	[Estado] varchar(50) NOT NULL,    -- Estado actual del pedido (Enviado, Recibido o Cancelado).
	[Total_pedido] decimal(18,2) NOT NULL,    -- Valor total del pedido solicitado al proveedor.
	[Id_proveedores] int NOT NULL    -- Clave foránea que indica a qué proveedor se realizó el pedido.
)
GO

CREATE TABLE [Tb_proveedores]
(
	[Id_proveedores] int NOT NULL,
	[Nombre_proveedor] varchar(50) NOT NULL,    -- Nombre de la empresa o persona proveedora.
	[Contacto_proveedor] varchar(50) NULL,    -- Persona de contacto dentro de la empresa proveedora.
	[Telefono] varchar(15) NULL    -- Teléfono de contacto del proveedor.
)
GO

CREATE TABLE [Tb_ventas]
(
	[Id_venta] int NOT NULL,
	[Id_cliente] int NOT NULL,    -- Clave foránea que indica qué cliente realizó la compra.
	[Fecha_venta] date NOT NULL,    -- Fecha y hora exacta en la que se concretó la venta.
	[Total_venta] decimal(18,2) NOT NULL    -- Valor total de la venta incluyendo impuestos.
)
GO

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE [Tb_autores] 
 ADD CONSTRAINT [PK_Tb_autores]
	PRIMARY KEY CLUSTERED ([Id_autor] ASC)
GO

ALTER TABLE [Tb_clientes] 
 ADD CONSTRAINT [PK_Tb_clientes]
	PRIMARY KEY CLUSTERED ([Id_cliente] ASC)
GO

ALTER TABLE [Tb_detalle_venta] 
 ADD CONSTRAINT [PK_Tb_detalle_venta]
	PRIMARY KEY CLUSTERED ([Id_detalle] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalle_venta_Tb_libros] 
 ON [Tb_detalle_venta] ([Id_libro] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalle_venta_Tb_ventas] 
 ON [Tb_detalle_venta] ([Id_venta] ASC)
GO

ALTER TABLE [Tb_detalles_pedidos] 
 ADD CONSTRAINT [PK_Tb_detalles_pedidos]
	PRIMARY KEY CLUSTERED ([Id_detalle_pedido] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalles_pedidos_Tb_libros] 
 ON [Tb_detalles_pedidos] ([Id_libro] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_detalles_pedidos_Tb_pedidos] 
 ON [Tb_detalles_pedidos] ([Id_pedido] ASC)
GO

ALTER TABLE [Tb_editoriales] 
 ADD CONSTRAINT [PK_Tb_editoriales]
	PRIMARY KEY CLUSTERED ([Id_editorial] ASC)
GO

ALTER TABLE [Tb_inventario] 
 ADD CONSTRAINT [PK_Tb_inventario]
	PRIMARY KEY CLUSTERED ([Id_inventario] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_inventario_Tb_libros] 
 ON [Tb_inventario] ([Id_libro] ASC)
GO

ALTER TABLE [Tb_libros] 
 ADD CONSTRAINT [PK_Tb_libros]
	PRIMARY KEY CLUSTERED ([Id_libro] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_libros_Tb_autores] 
 ON [Tb_libros] ([Id_autor] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_libros_Tb_editoriales] 
 ON [Tb_libros] ([Id_editorial] ASC)
GO

ALTER TABLE [Tb_pedidos] 
 ADD CONSTRAINT [PK_Tb_pedidos]
	PRIMARY KEY CLUSTERED ([Id_pedido] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_pedidos_Tb_proveedores] 
 ON [Tb_pedidos] ([Id_proveedores] ASC)
GO

ALTER TABLE [Tb_proveedores] 
 ADD CONSTRAINT [PK_Tb_proveedores]
	PRIMARY KEY CLUSTERED ([Id_proveedores] ASC)
GO

ALTER TABLE [Tb_ventas] 
 ADD CONSTRAINT [PK_Tb_ventas]
	PRIMARY KEY CLUSTERED ([Id_venta] ASC)
GO

CREATE NONCLUSTERED INDEX [IXFK_Tb_ventas_Tb_clientes] 
 ON [Tb_ventas] ([Id_cliente] ASC)
GO

/* Create Foreign Key Constraints */

ALTER TABLE [Tb_detalle_venta] ADD CONSTRAINT [FK_Tb_detalle_venta_Tb_libros]
	FOREIGN KEY ([Id_libro]) REFERENCES [Tb_libros] ([Id_libro]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_detalle_venta] ADD CONSTRAINT [FK_Tb_detalle_venta_Tb_ventas]
	FOREIGN KEY ([Id_venta]) REFERENCES [Tb_ventas] ([Id_venta]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_detalles_pedidos] ADD CONSTRAINT [FK_Tb_detalles_pedidos_Tb_libros]
	FOREIGN KEY ([Id_libro]) REFERENCES [Tb_libros] ([Id_libro]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_detalles_pedidos] ADD CONSTRAINT [FK_Tb_detalles_pedidos_Tb_pedidos]
	FOREIGN KEY ([Id_pedido]) REFERENCES [Tb_pedidos] ([Id_pedido]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_inventario] ADD CONSTRAINT [FK_Tb_inventario_Tb_libros]
	FOREIGN KEY ([Id_libro]) REFERENCES [Tb_libros] ([Id_libro]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_libros] ADD CONSTRAINT [FK_Tb_libros_Tb_autores]
	FOREIGN KEY ([Id_autor]) REFERENCES  () ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_libros] ADD CONSTRAINT [FK_Tb_libros_Tb_editoriales]
	FOREIGN KEY ([Id_editorial]) REFERENCES  () ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_pedidos] ADD CONSTRAINT [FK_Tb_pedidos_Tb_proveedores]
	FOREIGN KEY ([Id_proveedores]) REFERENCES [Tb_proveedores] ([Id_proveedores]) ON DELETE No Action ON UPDATE No Action
GO

ALTER TABLE [Tb_ventas] ADD CONSTRAINT [FK_Tb_ventas_Tb_clientes]
	FOREIGN KEY ([Id_cliente]) REFERENCES [Tb_clientes] ([Id_cliente]) ON DELETE No Action ON UPDATE No Action
GO

/* Create Table Comments */


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_autores', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Autores registra a los escritores de los libros disponibles en la librería. El campo Id_autor es la clave primaria y asegura la unicidad de cada autor. Los campos Nombre y Apellido contienen los datos personales básicos del autor, permitiendo identificarlo correctamente en relación con sus obras. Finalmente, el campo Nacionalidad opcional documenta el país de origen, lo que resulta útil para clasificar y segmentar la producción literaria según criterios culturales o de procedencia.', 'SCHEMA', 'dbo', 'table', 'Tb_autores' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Autores registra a los escritores de los libros disponibles en la librería. El campo Id_autor es la clave primaria y asegura la unicidad de cada autor. Los campos Nombre y Apellido contienen los datos personales básicos del autor, permitiendo identificarlo correctamente en relación con sus obras. Finalmente, el campo Nacionalidad opcional documenta el país de origen, lo que resulta útil para clasificar y segmentar la producción literaria según criterios culturales o de procedencia.', 'SCHEMA', 'dbo', 'table', 'Tb_autores' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Contiene el nombre de pila del autor, usado en la referencia de sus obras.', 'Schema', [dbo], 'table', [Tb_autores], 'column', [Nombre]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Almacena el apellido del autor para su correcta identificación.', 'Schema', [dbo], 'table', [Tb_autores], 'column', [Apellido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Indica el país de origen del autor, útil para clasificaciones culturales o geográficas.', 'Schema', [dbo], 'table', [Tb_autores], 'column', [Nacionalidad]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_clientes', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Clientes almacena la información básica de las personas que realizan compras en la librería. Su campo Id_cliente identifica de manera única a cada cliente, funcionando como clave primaria. Los campos Nombre y Apellido guardan el nombre completo, asegurando que la información del cliente esté registrada de forma clara.', 'SCHEMA', 'dbo', 'table', 'Tb_clientes' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Clientes almacena la información básica de las personas que realizan compras en la librería. Su campo Id_cliente identifica de manera única a cada cliente, funcionando como clave primaria. Los campos Nombre y Apellido guardan el nombre completo, asegurando que la información del cliente esté registrada de forma clara.', 'SCHEMA', 'dbo', 'table', 'Tb_clientes' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Registra el nombre propio del cliente, necesario para su identificación en reportes y facturación.', 'Schema', [dbo], 'table', [Tb_clientes], 'column', [Nombre]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Almacena el apellido del cliente, complementando su identificación personal.', 'Schema', [dbo], 'table', [Tb_clientes], 'column', [Apellido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Guarda la dirección de correo electrónico, útil para contacto, notificaciones y seguimiento.', 'Schema', [dbo], 'table', [Tb_clientes], 'column', [Email]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Fecha en que el cliente se registró en la base de datos, permite llevar un control histórico.', 'Schema', [dbo], 'table', [Tb_clientes], 'column', [Fecha_registro]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_detalle_venta', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Detalle_venta complementa la información de las ventas, desglosando qué libros se vendieron en cada transacción. El campo Id_detalle es la clave primaria que distingue cada línea de detalle. Id_venta enlaza el detalle con la tabla de ventas, y Id_libro conecta con el libro vendido. Cantidad indica el número de ejemplares adquiridos, mientras que Precio_unitario refleja el valor de cada libro en el momento de la compra', 'SCHEMA', 'dbo', 'table', 'Tb_detalle_venta' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Detalle_venta complementa la información de las ventas, desglosando qué libros se vendieron en cada transacción. El campo Id_detalle es la clave primaria que distingue cada línea de detalle. Id_venta enlaza el detalle con la tabla de ventas, y Id_libro conecta con el libro vendido. Cantidad indica el número de ejemplares adquiridos, mientras que Precio_unitario refleja el valor de cada libro en el momento de la compra', 'SCHEMA', 'dbo', 'table', 'Tb_detalle_venta' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que vincula el detalle con la venta correspondiente.', 'Schema', [dbo], 'table', [Tb_detalle_venta], 'column', [Id_venta]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que indica el libro vendido en la transacción.', 'Schema', [dbo], 'table', [Tb_detalle_venta], 'column', [Id_libro]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número de ejemplares de ese libro vendidos.', 'Schema', [dbo], 'table', [Tb_detalle_venta], 'column', [Cantidad]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Precio de venta por unidad de libro en ese detalle.', 'Schema', [dbo], 'table', [Tb_detalle_venta], 'column', [Precio_unitario]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_detalles_pedidos', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Detalles_pedido desglosa la información de cada pedido a proveedores. El campo Id_detalle_pedido es la clave primaria de cada registro. Id_pedido enlaza con el pedido al que pertenece el detalle, y Id_libro conecta con el libro solicitado. Cantidad especifica el número de unidades pedidas, mientras que Costo_unitario refleja el precio acordado por cada ejemplar.', 'SCHEMA', 'dbo', 'table', 'Tb_detalles_pedidos' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Detalles_pedido desglosa la información de cada pedido a proveedores. El campo Id_detalle_pedido es la clave primaria de cada registro. Id_pedido enlaza con el pedido al que pertenece el detalle, y Id_libro conecta con el libro solicitado. Cantidad especifica el número de unidades pedidas, mientras que Costo_unitario refleja el precio acordado por cada ejemplar.', 'SCHEMA', 'dbo', 'table', 'Tb_detalles_pedidos' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que vincula el detalle con el pedido correspondiente.', 'Schema', [dbo], 'table', [Tb_detalles_pedidos], 'column', [Id_pedido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que indica el libro solicitado al proveedor.', 'Schema', [dbo], 'table', [Tb_detalles_pedidos], 'column', [Id_libro]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número de copias pedidas de ese libro.', 'Schema', [dbo], 'table', [Tb_detalles_pedidos], 'column', [Cantidad]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Precio acordado por unidad del libro en el pedido.', 'Schema', [dbo], 'table', [Tb_detalles_pedidos], 'column', [Costo_unitario]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_editoriales', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Editoriales gestiona las casas editoriales responsables de la publicación de los libros. El campo Id_editorial es la clave primaria que identifica de manera única cada editorial. El campo Nombre_editorial almacena el nombre completo de la empresa editora. ', 'SCHEMA', 'dbo', 'table', 'Tb_editoriales' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Editoriales gestiona las casas editoriales responsables de la publicación de los libros. El campo Id_editorial es la clave primaria que identifica de manera única cada editorial. El campo Nombre_editorial almacena el nombre completo de la empresa editora. ', 'SCHEMA', 'dbo', 'table', 'Tb_editoriales' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Nombre completo de la editorial.', 'Schema', [dbo], 'table', [Tb_editoriales], 'column', [Nombre_editorial]
GO

EXEC sp_addextendedproperty 'MS_Description', 'País de origen de la editorial.', 'Schema', [dbo], 'table', [Tb_editoriales], 'column', [Pais]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número telefónico de contacto de la editorial.', 'Schema', [dbo], 'table', [Tb_editoriales], 'column', [Telefono]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_inventario', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Inventario permite controlar las existencias físicas de los libros en la librería. El campo Id_inventario es la clave primaria del registro. El campo Id_libro funciona como clave foránea que enlaza el inventario con el libro correspondiente. Cantidad_disponible indica el número actual de copias en stock, mientras que Ubicacion señala el espacio físico donde se encuentra almacenado el libro dentro de la librería.', 'SCHEMA', 'dbo', 'table', 'Tb_inventario' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Inventario permite controlar las existencias físicas de los libros en la librería. El campo Id_inventario es la clave primaria del registro. El campo Id_libro funciona como clave foránea que enlaza el inventario con el libro correspondiente. Cantidad_disponible indica el número actual de copias en stock, mientras que Ubicacion señala el espacio físico donde se encuentra almacenado el libro dentro de la librería.', 'SCHEMA', 'dbo', 'table', 'Tb_inventario' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que indica a qué libro pertenece el stock.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [Id_libro]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Número de ejemplares disponibles en existencia.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [Cantidad_disponible]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Lugar físico donde se encuentra almacenado el libro.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [Ubicacion]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Fecha y hora de la última modificación del stock.', 'Schema', [dbo], 'table', [Tb_inventario], 'column', [Ultima_actualizacion]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_libros', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Libros constituye el núcleo del sistema, ya que registra todos los títulos disponibles para la venta. El campo Id_libro es la clave primaria que distingue cada ejemplar. Titulo almacena el nombre del libro, mientras que ISBN guarda su código internacional único. Año_publicacion indica la fecha en que salió al mercado y Precio_venta refleja el valor económico de cada ejemplar. Los campos Id_autor e Id_editorial funcionan como claves foráneas que enlazan cada libro con su autor y editorial, asegurando la trazabilidad bibliográfica y comercial.', 'SCHEMA', 'dbo', 'table', 'Tb_libros' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Libros constituye el núcleo del sistema, ya que registra todos los títulos disponibles para la venta. El campo Id_libro es la clave primaria que distingue cada ejemplar. Titulo almacena el nombre del libro, mientras que ISBN guarda su código internacional único. Año_publicacion indica la fecha en que salió al mercado y Precio_venta refleja el valor económico de cada ejemplar. Los campos Id_autor e Id_editorial funcionan como claves foráneas que enlazan cada libro con su autor y editorial, asegurando la trazabilidad bibliográfica y comercial.', 'SCHEMA', 'dbo', 'table', 'Tb_libros' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Nombre o título del libro.', 'Schema', [dbo], 'table', [Tb_libros], 'column', [Titulo]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Código único internacional que identifica el libro.', 'Schema', [dbo], 'table', [Tb_libros], 'column', [ISBN]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Fecha o año en que el libro fue publicado.', 'Schema', [dbo], 'table', [Tb_libros], 'column', [Ano_publicacion]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Precio de venta del libro en la librería.', 'Schema', [dbo], 'table', [Tb_libros], 'column', [Precio_venta]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que relaciona el libro con su autor.', 'Schema', [dbo], 'table', [Tb_libros], 'column', [Id_autor]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que relaciona el libro con su editorial.', 'Schema', [dbo], 'table', [Tb_libros], 'column', [Id_editorial]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_pedidos', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Pedidos centraliza las órdenes realizadas a los proveedores. El campo Id_pedido es la clave primaria que distingue cada solicitud. Id_proveedor funciona como clave foránea, enlazando el pedido con su proveedor correspondiente. Fecha_pedido indica cuándo se emitió la orden, mientras que Estado refleja el avance del pedido (enviado, recibido o cancelado).', 'SCHEMA', 'dbo', 'table', 'Tb_pedidos' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Pedidos centraliza las órdenes realizadas a los proveedores. El campo Id_pedido es la clave primaria que distingue cada solicitud. Id_proveedor funciona como clave foránea, enlazando el pedido con su proveedor correspondiente. Fecha_pedido indica cuándo se emitió la orden, mientras que Estado refleja el avance del pedido (enviado, recibido o cancelado).', 'SCHEMA', 'dbo', 'table', 'Tb_pedidos' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Fecha en la que se realizó la orden de compra.', 'Schema', [dbo], 'table', [Tb_pedidos], 'column', [Fecha_pedido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Estado actual del pedido (Enviado, Recibido o Cancelado).', 'Schema', [dbo], 'table', [Tb_pedidos], 'column', [Estado]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Valor total del pedido solicitado al proveedor.', 'Schema', [dbo], 'table', [Tb_pedidos], 'column', [Total_pedido]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que indica a qué proveedor se realizó el pedido.', 'Schema', [dbo], 'table', [Tb_pedidos], 'column', [Id_proveedores]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_proveedores', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Proveedores gestiona la información de las empresas o personas que abastecen a la librería. El campo Id_proveedor es la clave primaria que los identifica de manera única. Nombre_proveedor almacena la denominación comercial, mientras que Contacto_proveedor permite registrar la persona encargada de la relación directa.', 'SCHEMA', 'dbo', 'table', 'Tb_proveedores' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Proveedores gestiona la información de las empresas o personas que abastecen a la librería. El campo Id_proveedor es la clave primaria que los identifica de manera única. Nombre_proveedor almacena la denominación comercial, mientras que Contacto_proveedor permite registrar la persona encargada de la relación directa.', 'SCHEMA', 'dbo', 'table', 'Tb_proveedores' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Nombre de la empresa o persona proveedora.', 'Schema', [dbo], 'table', [Tb_proveedores], 'column', [Nombre_proveedor]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Persona de contacto dentro de la empresa proveedora.', 'Schema', [dbo], 'table', [Tb_proveedores], 'column', [Contacto_proveedor]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Teléfono de contacto del proveedor.', 'Schema', [dbo], 'table', [Tb_proveedores], 'column', [Telefono]
GO


GOif exists (select * from ::fn_listextendedproperty ('MS_Description', 'SCHEMA', 'dbo', 'table', 'Tb_ventas', NULL, NULL)) 
begin 
  EXEC sys.sp_updateextendedproperty 'MS_Description', 'La tabla Ventas almacena todas las transacciones realizadas en la librería. El campo Id_venta es la clave primaria que identifica cada operación de venta. Id_cliente actúa como clave foránea que vincula la venta con el cliente que la efectuó. Fecha_venta registra el momento exacto de la transacción, mientras que Total_venta refleja el importe total facturado', 'SCHEMA', 'dbo', 'table', 'Tb_ventas' 
end 
else 
begin 
  EXEC sys.sp_addextendedproperty 'MS_Description', 'La tabla Ventas almacena todas las transacciones realizadas en la librería. El campo Id_venta es la clave primaria que identifica cada operación de venta. Id_cliente actúa como clave foránea que vincula la venta con el cliente que la efectuó. Fecha_venta registra el momento exacto de la transacción, mientras que Total_venta refleja el importe total facturado', 'SCHEMA', 'dbo', 'table', 'Tb_ventas' 
end

EXEC sp_addextendedproperty 'MS_Description', 'Clave foránea que indica qué cliente realizó la compra.', 'Schema', [dbo], 'table', [Tb_ventas], 'column', [Id_cliente]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Fecha y hora exacta en la que se concretó la venta.', 'Schema', [dbo], 'table', [Tb_ventas], 'column', [Fecha_venta]
GO

EXEC sp_addextendedproperty 'MS_Description', 'Valor total de la venta incluyendo impuestos.', 'Schema', [dbo], 'table', [Tb_ventas], 'column', [Total_venta]
GO
